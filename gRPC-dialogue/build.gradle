plugins {
    id 'java'
    id 'idea'
    id 'org.springframework.boot' version '3.0.6'
    id 'io.spring.dependency-management' version '1.1.0'
    id "com.google.protobuf" version "0.8.16"
}

group = 'landau.leo'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '17'

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-jdbc'
    implementation 'org.springframework.boot:spring-boot-starter-logging'

    implementation 'net.devh:grpc-server-spring-boot-starter:2.15.0.RELEASE'
    implementation 'javax.annotation:javax.annotation-api:1.3.2'

    implementation 'org.postgresql:postgresql:42.6.0'
    implementation 'com.google.protobuf:protobuf-java:3.24.0'
    implementation 'com.google.errorprone:error_prone_annotations:2.20.0'
    implementation 'com.google.guava:guava:32.0.1-jre'
    implementation 'org.apache.tomcat:tomcat-annotations-api:11.0.0-M5'

    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'
}

def filesBaseDir = "$projectDir/build/generated" //каталог, где будут храниться сгенерированные файлы
def protoSrcDir = "$projectDir/build/generated/proto"
def grpcSrcDir = "$projectDir/build/generated/grpc"

sourceSets {
    main {
        proto {
            srcDir protoSrcDir
        }
        java {
            srcDir grpcSrcDir
        }
    }
}

idea {
    module {
        sourceDirs += file(protoSrcDir);
        sourceDirs += file(grpcSrcDir);
    }
}

protobuf {
    protoc {
        artifact = 'com.google.protobuf:protoc:3.22.3'
    }

    plugins {
        grpc {
            artifact = 'io.grpc:protoc-gen-grpc-java:1.54.1'

        }
    }

    generatedFilesBaseDir = filesBaseDir
    generateProtoTasks {
        ofSourceSet('main')*.plugins { grpc {} }
    }
}

tasks.named('test') {
    useJUnitPlatform()
}

//https://stackoverflow.com/a/54117966
allprojects { project ->
    project.plugins.withId('java') {
        test {
            maxHeapSize = "1536M"
            // If you don't want to use spring.properties (or add other JVM args)
            jvmArgs "-Dspring.test.context.cache.maxSize=1"
        }
    }
    project.plugins.withId('java-library') {
        test {
            maxHeapSize = "1536M"
            // If you don't want to use spring.properties (or add other JVM args)
            jvmArgs "-Dspring.test.context.cache.maxSize=1"
        }
    }
}